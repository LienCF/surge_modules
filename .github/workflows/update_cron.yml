name: Update Cron Schedule

on:
  schedule:
    - cron: '0 0 * * *' # UTC 23:45 (台北時間 7:45)
  workflow_dispatch:  # 啟用手動觸發

jobs:
  update-cron:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code with PAT token
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # 獲取完整的歷史記錄
          token: ${{ secrets.WORKFLOW_PAT }}  # 使用個人訪問令牌

      - name: Update cron schedule
        run: |
          # 獲取當前 UTC 時間並轉換為台北時間
          CURRENT_HOUR_UTC=$(date -u +"%H")
          CURRENT_MINUTE_UTC=$(date -u +"%M")
          TAIPEI_HOUR=$(( (CURRENT_HOUR_UTC + 8) % 24 ))
          TAIPEI_MINUTE=$CURRENT_MINUTE_UTC
          echo "Current UTC time: $CURRENT_HOUR_UTC:$CURRENT_MINUTE_UTC"
          echo "Current Taipei time: $TAIPEI_HOUR:$TAIPEI_MINUTE"
          
          # 記錄檔案路徑使用固定路徑
          LAST_MORNING_FILE="data/.last_morning_minute"
          
          # 確保目錄存在
          mkdir -p data
          
          # 檢查是否有上次執行記錄
          if [ -f "$LAST_MORNING_FILE" ]; then
            echo "Found previous execution record"
            LAST_MORNING_MINUTE=$(cat $LAST_MORNING_FILE)
            echo "Last morning minute: $LAST_MORNING_MINUTE"
            
            # 計算當前時間在一天中的絕對分鐘值
            CURRENT_TAIPEI_MINUTES=$(( TAIPEI_HOUR * 60 + TAIPEI_MINUTE ))
            
            # 定義早上時段（7:30-8:00）的絕對分鐘值
            MORNING_START=$(( 7 * 60 + 30 ))  # 7:30
            MORNING_END=$(( 8 * 60 ))         # 8:00
            
            # 計算上午執行時間的絕對分鐘值
            LAST_MORNING_ABSOLUTE_MINUTES=$(( 7 * 60 + LAST_MORNING_MINUTE ))
            
            # 計算下午時段的開始和結束時間（上午執行後 9.75-10.25 小時）
            AFTERNOON_START=$(( LAST_MORNING_ABSOLUTE_MINUTES + 585 ))  # 9.75小時 = 585分鐘
            AFTERNOON_END=$(( LAST_MORNING_ABSOLUTE_MINUTES + 615 ))    # 10.25小時 = 615分鐘
            
            # 轉換為小時和分鐘以便輸出
            AFTERNOON_START_HOUR=$(( AFTERNOON_START / 60 % 24 ))
            AFTERNOON_START_MINUTE=$(( AFTERNOON_START % 60 ))
            AFTERNOON_END_HOUR=$(( AFTERNOON_END / 60 % 24 ))
            AFTERNOON_END_MINUTE=$(( AFTERNOON_END % 60 ))
            
            echo "Afternoon time slot: $AFTERNOON_START_HOUR:$AFTERNOON_START_MINUTE - $AFTERNOON_END_HOUR:$AFTERNOON_END_MINUTE"
            
            # 決定下一個執行時段（上午或下午）
            # 這裡我們採用簡單的交替執行方式
            # 檢查當前時間在哪個時段內，或者已經過了哪個時段
            if [ $CURRENT_TAIPEI_MINUTES -lt $MORNING_START ]; then
              # 時間在上午時段之前，下次執行上午時段
              echo "Current time is before morning slot. Next execution will be in the morning."
              TARGET_PERIOD="MORNING"
            elif [ $CURRENT_TAIPEI_MINUTES -ge $MORNING_END ] && [ $CURRENT_TAIPEI_MINUTES -lt $AFTERNOON_START ]; then
              # 時間在上午時段之後、下午時段之前，下次執行下午時段
              echo "Current time is after morning slot but before afternoon slot. Next execution will be in the afternoon."
              TARGET_PERIOD="AFTERNOON"
            elif [ $CURRENT_TAIPEI_MINUTES -ge $AFTERNOON_END ]; then
              # 時間在下午時段之後，下次執行上午時段
              echo "Current time is after afternoon slot. Next execution will be tomorrow morning."
              TARGET_PERIOD="MORNING"
            elif [ $CURRENT_TAIPEI_MINUTES -ge $MORNING_START ] && [ $CURRENT_TAIPEI_MINUTES -lt $MORNING_END ]; then
              # 時間正好在上午時段內，下次執行下午時段
              echo "Current time is within morning slot. Next execution will be in the afternoon."
              TARGET_PERIOD="AFTERNOON"
            else
              # 時間正好在下午時段內，下次執行上午時段
              echo "Current time is within afternoon slot. Next execution will be tomorrow morning."
              TARGET_PERIOD="MORNING"
            fi
          else
            # 第一次執行，一律設定為上午時段
            echo "First execution detected. Setting next execution to morning slot."
            TARGET_PERIOD="MORNING"
          fi
          
          # 根據目標時段設定執行時間
          if [ "$TARGET_PERIOD" = "MORNING" ]; then
            # 上午時段：生成 7:30-8:00 之間的隨機分鐘數
            TARGET_HOUR=7
            RANDOM_MINUTE=$(( 30 + RANDOM % 30 ))
            
            # 保存上午執行分鐘數，以供下午計算使用
            echo "$RANDOM_MINUTE" > $LAST_MORNING_FILE
            echo "Saved morning minute: $RANDOM_MINUTE to $LAST_MORNING_FILE"
            
            echo "Generated morning execution time: $TARGET_HOUR:$RANDOM_MINUTE (Taipei time)"
            
            # 轉換為 UTC 時間 (台北時間 - 8 小時)
            UTC_TARGET_HOUR=$(( (TARGET_HOUR - 8 + 24) % 24 ))  # 台北 7 點對應 UTC 23 點
          else
            # 下午時段計算
            MORNING_MINUTE=$(cat $LAST_MORNING_FILE)
            
            # 基準時間：上午 7 點 + MORNING_MINUTE 分鐘
            MORNING_ABSOLUTE_MINUTES=$(( 7 * 60 + MORNING_MINUTE ))
            
            # 計算 9.75 小時後的時間 (9 小時 45 分鐘 = 585 分鐘)
            BASE_MINUTES=$(( MORNING_ABSOLUTE_MINUTES + 585 ))
            
            # 隨機增加 0-30 分鐘（總共 9.75 到 10.25 小時）
            RANDOM_ADDITIONAL_MINUTES=$(( RANDOM % 31 ))
            TOTAL_MINUTES=$(( BASE_MINUTES + RANDOM_ADDITIONAL_MINUTES ))
            
            # 計算最終的小時和分鐘
            TARGET_HOUR=$(( TOTAL_MINUTES / 60 % 24 ))
            RANDOM_MINUTE=$(( TOTAL_MINUTES % 60 ))
            
            echo "Generated afternoon execution time: $TARGET_HOUR:$RANDOM_MINUTE (Taipei time)"
            
            # 轉換為 UTC 時間
            UTC_TARGET_HOUR=$(( (TARGET_HOUR - 8 + 24) % 24 ))
          fi
          
          # 更新模組排程 (只更新分鐘)
          echo "Updating module schedule to run at minute=$RANDOM_MINUTE (Taipei time)"
          # 檢查模組檔案中 cronexp 的格式
          grep -n "cronexp=" E2NovaCheckIn.sgmodule || echo "No cronexp pattern found"
          
          # 更新模組排程，只替換分鐘部分，保留小時為 *
          sed -i "s/cronexp=\"[0-9]* /cronexp=\"$RANDOM_MINUTE /" E2NovaCheckIn.sgmodule
          
          # 檢查更新後的格式
          echo "After update:"
          grep -n "cronexp=" E2NovaCheckIn.sgmodule
          
          echo "Updated module schedule with minute=$RANDOM_MINUTE"
          
          # 計算 workflow 執行時間 (模組執行後 5 分鐘)
          WORKFLOW_MINUTE=$(( (RANDOM_MINUTE + 5) % 60 ))
          WORKFLOW_HOUR=$UTC_TARGET_HOUR
          
          # 處理分鐘數溢出情況
          if [ $WORKFLOW_MINUTE -lt $RANDOM_MINUTE ]; then
            # 跨小時，UTC 小時 +1
            WORKFLOW_HOUR=$(( (UTC_TARGET_HOUR + 1) % 24 ))
          fi
          
          # 更新 workflow 排程
          NEW_CRON="$WORKFLOW_MINUTE $WORKFLOW_HOUR * * *"
          echo "Updating workflow schedule to: $NEW_CRON (UTC time)"
          
          # 修正 sed 命令，使用正確的模式匹配 workflow 檔案中的 cron 設定
          sed -i "s/- cron: '[0-9]* [0-9]* \* \* \*'/- cron: '$NEW_CRON'/" .github/workflows/update_cron.yml
          
          # 顯示將要提交的檔案
          echo "--- Files to be committed ---"
          ls -la data/ || echo "Data directory not found"
          cat $LAST_MORNING_FILE || echo "Last morning file not found"
          echo "-----------------------------"

      - name: Commit and push changes
        run: |
          # Configure Git with GitHub Action bot details
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          
          # 確保目錄存在並顯示狀態
          mkdir -p data
          git status
          
          # Stage, commit and push changes (明確列出所有需要提交的檔案)
          git add E2NovaCheckIn.sgmodule .github/workflows/update_cron.yml data/
          git status
          
          # 使用 -f 強制添加 .last_morning_minute 檔案，防止被 .gitignore 忽略
          git add -f data/.last_morning_minute
          git status
          
          git commit -m "Update cron schedules for E2NovaCheckIn and workflow" || echo "No changes to commit"
          
          # 使用 PAT 認證推送變更
          git push https://${{ secrets.WORKFLOW_PAT }}@github.com/${{ github.repository }}.git
